// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.21;

import {PreCompiles} from "./libraries/PreCompiles.sol";

contract Verifier {
    // constants
    uint256 public constant CURVE_ORDER = 21888242871839275222246405745257275088548364400416034343698204186575808495617;
    uint256 public constant G1_X = 1;
    uint256 public constant G1_Y = 2;

    // Pairings
    uint256 public constant ALPHA_X = 3010198690406615200373504922352659861758983907867017329644089018310584441462;
    uint256 public constant ALPHA_Y = 4027184618003122424972590350825261965929648733675738730716654005365300998076;
    uint256 public constant BETA2_X1 = 18936818173480011669507163011118288089468827259971823710084038754632518263340;
    uint256 public constant BETA2_X2 = 18556147586753789634670778212244811446448229326945855846642767021074501673839;
    uint256 public constant BETA2_Y1 = 18825831177813899069786213865729385895767511805925522466244528695074736584695;
    uint256 public constant BETA2_Y2 = 13775476761357503446238925910346030822904460488609979964814810757616608848118;
    uint256 public constant GAMMA_X1 = 2725019753478801796453339367788033689375851816420509565303521482350756874229;
    uint256 public constant GAMMA_X2 = 7273165102799931111715871471550377909735733521218303035754523677688038059653;
    uint256 public constant GAMMA_Y1 = 2512659008974376214222774206987427162027254181373325676825515531566330959255;
    uint256 public constant GAMMA_Y2 = 957874124722006818841961785324909313781880061366718538693995380805373202866;
    uint256 public constant DELTA_X1 = 2725019753478801796453339367788033689375851816420509565303521482350756874229;
    uint256 public constant DELTA_X2 = 7273165102799931111715871471550377909735733521218303035754523677688038059653;
    uint256 public constant DELTA_Y1 = 2512659008974376214222774206987427162027254181373325676825515531566330959255;
    uint256 public constant DELTA_Y2 = 957874124722006818841961785324909313781880061366718538693995380805373202866;

    struct G1Point {
        uint256 x;
        uint256 y;
    }

    struct G2Point {
        uint256 x1;
        uint256 y1;
        uint256 x2;
        uint256 y2;
    }

    function getX1(uint256 x1, uint256 x2, uint256 x3) internal view returns (uint256 X1_x, uint256 X1_y) {
        uint256 fieldElement = x1 + x2 + x3;
        (X1_x, X1_y) = PreCompiles.mul(scalar, G1_X, G1_Y);
    }

    function verify(G1Point memory A1, G2Point memory B2, G1Point memory C1, uint256 x1, uint256 x2, uint256 x3)
        public
        view
        returns (bool)
    {
        // 1. Construct X1
        (uint256 X1_x, uint256 X1_y) = getX1(x1, x2, x3);

        // 2. Construct points for verification
        uint256[24] memory input = [
            A1.x,
            A1.y,
            B2.x2,
            B2.x1,
            B2.y2,
            B2.y1,
            ALPHA_X,
            ALPHA_Y,
            BETA2_X2,
            BETA2_X1,
            BETA2_Y2,
            BETA2_Y1,
            X1_x,
            X1_y,
            GAMMA_X2,
            GAMMA_X1,
            GAMMA_Y2,
            GAMMA_Y1,
            C1.x,
            C1.y,
            DELTA_X2,
            DELTA_X1,
            DELTA_Y2,
            DELTA_Y1
        ];

        // Verify sums to 0
        return PreCompiles.pairing(input);
    }
}

/*
Testing:

A: [3932705576657793550893430333273221375907985235130430286685735064194643946083, 3074479578807018676308648798898008971658476598105910396234953551932693339430]

B: [11166086885672626473267565287145132336823242144708474818695443831501089511977, 1513450333913810775282357068930057790874607011341873340507105465411024430745, 10576778712883087908382530888778326306865681986179249638025895353796469496812, 20245151454212206884108313452940569906396451322269011731680309881579291004202]

C: [3010198690406615200373504922352659861758983907867017329644089018310584441462, 4027184618003122424972590350825261965929648733675738730716654005365300998076]

x1: 2

x2: 4

x4: 6
*/
